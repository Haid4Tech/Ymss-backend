generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          Role
  phone         String
  address       String?
  student       Student?
  parent        Parent?
  teacher       Teacher?
  events        Event[]
  announcements Announcement[]
  createdAt     DateTime       @default(now())
}

model Student {
  id         Int              @id @default(autoincrement())
  user       User             @relation(fields: [userId], references: [id])
  userId     Int              @unique
  class      Class            @relation(fields: [classId], references: [id])
  classId    Int
  parent     Parent?          @relation(fields: [parentId], references: [id])
  parentId   Int?
  records    AcademicRecord[]
  attendance Attendance[]
  grades     Grade[]

  Result Result[]
}

model Parent {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @unique
  students Student[]
}

model Teacher {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @unique
  subjects Subject[]
  Class    Class[]
  Result   Result[]
}

model Class {
  id        Int       @id @default(autoincrement())
  name      String
  capacity  Int
  students  Student[]
  subjects  Subject[]
  exams     Exam[]
  teacherId Int?
  teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  Result    Result[]
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String
  class     Class?   @relation(fields: [classId], references: [id])
  classId   Int?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId Int?
  exams     Exam[]
  Result    Result[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  class     Class    @relation(fields: [classId], references: [id])
  classId   Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  grades    Grade[]
  createdAt DateTime @default(now())
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  allDay      Boolean
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  updatedAt   DateTime @updatedAt
}

model Attendance {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  date      DateTime
  present   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  exam      Exam     @relation(fields: [examId], references: [id])
  examId    Int
  value     Float
  date      DateTime
}

model AcademicRecord {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  year      Int
  term      Term
  summary   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Result {
  id        Int      @id @default(autoincrement())
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id])
  grade     Int
  teacherId Int
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  classId   Int
  class     Class?   @relation(fields: [classId], references: [id])
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum Role {
  STUDENT
  PARENT
  TEACHER
  ADMIN
}

enum Term {
  FIRST
  SECOND
  THIRD
}
