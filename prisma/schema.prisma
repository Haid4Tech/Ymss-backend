generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  email         String             @unique
  password      String
  name          String
  role          Role
  phone         String?
  photo         String?
  createdAt     DateTime           @default(now())
  DOB           DateTime?
  gender        Gender?
  nationality   String?
  country       String?
  religion      String?
  bloodGroup    String?
  address       String?
  medicalInfo   MedicalInfo?
  announcements Announcement[]
  events        Event[]
  parent        Parent?
  student       Student?
  teacher       Teacher?
  emergencyInfo EmergencyContacts?
}

model Student {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  classId        Int
  parentId       Int?
  admissionDate  DateTime         @default(now())
  previousSchool String?
  relationship   String
  records        AcademicRecord[]
  attendance     Attendance[]
  grades         Grade[]
  class          Class            @relation(fields: [classId], references: [id])
  parent         Parent?          @relation(fields: [parentId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
}

model Parent {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id])
  students Student[]
}

model Teacher {
  id                  Int       @id @default(autoincrement())
  userId              Int       @unique
  hireDate            DateTime  @default(now())
  experience          String?
  employmentType      String?
  salary              Int?
  degree              String?
  university          String?
  graduationYear      String?
  previousInstitution String
  subjects            Subject[]
  user                User      @relation(fields: [userId], references: [id])
  Exam                Exam[]
  Class               Class[]
}

model Class {
  id           Int       @id @default(autoincrement())
  name         String
  capacity     String
  roomNumber   String
  description  String?
  academicYear String?
  startDate    DateTime
  endDate      DateTime
  startTime    String?
  endTime      String?
  days         String[]
  exams        Exam[]
  students     Student[]
  subjects     Subject[]
  teacherId    Int
  teacher      Teacher   @relation(fields: [teacherId], references: [id])
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  category    String?
  weeklyHours Int?
  gradeId     Int?
  classId     Int?
  teacherId   Int?
  exams       Exam[]
  class       Class?   @relation(fields: [classId], references: [id])
  teacher     Teacher? @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  startTime String
  examType  String
  duration  Int?
  classId   Int
  subjectId Int
  teacherId Int
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  grades    Grade[]
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  startTime   String
  endTime     String
  category    String
  color       String
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  studentId Int
  date      DateTime
  present   Boolean
  student   Student  @relation(fields: [studentId], references: [id])
}

model Grade {
  id        Int      @id @default(autoincrement())
  studentId Int
  examId    Int
  value     Float
  date      DateTime
  exam      Exam     @relation(fields: [examId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model AcademicRecord {
  id        Int     @id @default(autoincrement())
  studentId Int
  year      Int
  term      Term
  summary   String
  student   Student @relation(fields: [studentId], references: [id])
}

model Announcement {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  priority    String?
  category    String
  publishDate DateTime  @default(now())
  expiryDate  DateTime?
  attachment  String?
  createdAt   DateTime  @default(now())
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
}

model MedicalInfo {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  conditions  String?
  allergies   String?
  medications String?
  doctorName  String?
  doctorPhone String?
}

model EmergencyContacts {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])
  name     String
  phone    String
  relation String
}

enum Role {
  STUDENT
  PARENT
  TEACHER
  ADMIN
}

enum Term {
  FIRST
  SECOND
  THIRD
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
