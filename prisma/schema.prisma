generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  password          String
  name              String
  role              Role
  photo             String?
  createdAt         DateTime           @default(now())
  DOB               DateTime?
  gender            Gender?
  nationality       String?
  country           String?
  religion          String?
  bloodGroup        String?
  address           String?
  medicalInfo       MedicalInfo?
  announcements     Announcement[]
  events            Event[]
  parent            Parent?
  student           Student?
  teacher           Teacher?
  emergencyContacts EmergencyContacts?
}

model Student {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  classId        Int
  parentId       Int?
  admissionDate  DateTime
  previousSchool String?
  records        AcademicRecord[]
  attendance     Attendance[]
  grades         Grade[]
  class          Class            @relation(fields: [classId], references: [id])
  parent         Parent?          @relation(fields: [parentId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
}

model Parent {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id])
  students Student[]
}

model Teacher {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  subjects Subject[]
  user     User      @relation(fields: [userId], references: [id])
}

model Class {
  id       Int       @id @default(autoincrement())
  name     String
  exams    Exam[]
  students Student[]
  subjects Subject[]
}

model Subject {
  id             Int      @id @default(autoincrement())
  name           String
  classId        Int?
  teacherId      Int?
  previousSchool String?
  exams          Exam[]
  class          Class?   @relation(fields: [classId], references: [id])
  teacher        Teacher? @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  classId   Int
  subjectId Int
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  grades    Grade[]
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  startTime   String
  endTime     String
  category    String
  color       String
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  studentId Int
  date      DateTime
  present   Boolean
  student   Student  @relation(fields: [studentId], references: [id])
}

model Grade {
  id        Int      @id @default(autoincrement())
  studentId Int
  examId    Int
  value     Float
  date      DateTime
  exam      Exam     @relation(fields: [examId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model AcademicRecord {
  id        Int     @id @default(autoincrement())
  studentId Int
  year      Int
  term      Term
  summary   String
  student   Student @relation(fields: [studentId], references: [id])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model MedicalInfo {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  conditions  String?
  allergies   String?
  medications String?
  doctorName  String?
  doctorPhone String?
}

model EmergencyContacts {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])
  name     String
  phone    String
  relation String
}

enum Role {
  STUDENT
  PARENT
  TEACHER
  ADMIN
}

enum Term {
  FIRST
  SECOND
  THIRD
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
