generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  email         String             @unique
  password      String
  firstname     String
  role          Role
  photo         String?
  createdAt     DateTime           @default(now())
  DOB           DateTime?
  gender        Gender?
  nationality   String?
  country       String?
  religion      String?
  bloodGroup    String?
  state         String?
  phone         String?
  street        String?
  zipcode       String?
  city          String?
  lastname      String?
  announcements Announcement[]
  emergencyInfo EmergencyContacts?
  events        Event[]
  medicalInfo   MedicalInfo?
  parent        Parent?
  student       Student?
  teacher       Teacher?
}

model Student {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  classId        Int
  admissionDate  DateTime         @default(now())
  previousSchool String?
  relationship   String
  records        AcademicRecord[]
  enrollments    Enrollment[]
  Grade          Grade[]
  parents        ParentStudent[]
  class          Class            @relation(fields: [classId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
}

model Parent {
  id       Int             @id @default(autoincrement())
  userId   Int             @unique
  user     User            @relation(fields: [userId], references: [id])
  students ParentStudent[]
}

model ParentStudent {
  id        Int     @id @default(autoincrement())
  parentId  Int
  studentId Int
  parent    Parent  @relation(fields: [parentId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@unique([parentId, studentId])
}

model Teacher {
  id                  Int              @id @default(autoincrement())
  userId              Int              @unique
  degree              String?
  employmentType      String?
  experience          String?
  graduationYear      String?
  hireDate            DateTime         @default(now())
  previousInstitution String?
  salary              Int?
  university          String?
  classes             Class[]
  exams               Exam[]
  subjects            SubjectTeacher[]
  user                User             @relation(fields: [userId], references: [id])
}

model Class {
  id           Int       @id @default(autoincrement())
  name         String
  academicYear String?
  capacity     Int
  days         String[]
  description  String?
  endDate      DateTime
  endTime      String?
  roomNumber   String
  startDate    DateTime
  startTime    String?
  teacherId    Int?
  teacher      Teacher?  @relation(fields: [teacherId], references: [id])
  exams        Exam[]
  students     Student[]
  subjects     Subject[]
}

model Subject {
  id          Int              @id @default(autoincrement())
  name        String
  classId     Int
  category    String?
  description String
  weeklyHours Int?
  enrollments Enrollment[]
  exams       Exam[]
  class       Class            @relation(fields: [classId], references: [id])
  teachers    SubjectTeacher[]
}

model SubjectTeacher {
  id        Int     @id @default(autoincrement())
  subjectId Int
  teacherId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, teacherId])
}

model Enrollment {
  id         Int                 @id @default(autoincrement())
  studentId  Int
  subjectId  Int
  enrolledAt DateTime            @default(now())
  student    Student             @relation(fields: [studentId], references: [id])
  subject    Subject             @relation(fields: [subjectId], references: [id])
  attendance SubjectAttendance[]

  @@unique([studentId, subjectId])
}

model SubjectAttendance {
  id           Int              @id @default(autoincrement())
  enrollmentId Int
  date         DateTime
  status       AttendanceStatus
  enrollment   Enrollment       @relation(fields: [enrollmentId], references: [id])

  @@unique([enrollmentId, date])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  classId   Int
  subjectId Int
  createdAt DateTime @default(now())
  duration  Int?
  examType  String
  startTime String
  teacherId Int
  class     Class    @relation(fields: [classId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  grades    Grade[]
}

model Grade {
  id        Int      @id @default(autoincrement())
  studentId Int
  examId    Int
  value     Float
  date      DateTime
  exam      Exam     @relation(fields: [examId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model AcademicRecord {
  id        Int     @id @default(autoincrement())
  studentId Int
  year      Int
  term      Term
  summary   String
  student   Student @relation(fields: [studentId], references: [id])
}

model Announcement {
  id                Int       @id @default(autoincrement())
  title             String
  content           String
  createdAt         DateTime  @default(now())
  authorId          Int
  attachments       String[]
  category          String
  emailNotification Boolean   @default(false)
  expiryDate        DateTime?
  isPublished       Boolean   @default(true)
  priority          String?
  publishDate       DateTime  @default(now())
  sendNotification  Boolean   @default(true)
  smsNotification   Boolean   @default(false)
  targetAudience    String?
  author            User      @relation(fields: [authorId], references: [id])
}

model MedicalInfo {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  conditions  String?
  allergies   String?
  medications String?
  doctorName  String?
  doctorPhone String?
  user        User    @relation(fields: [userId], references: [id])
}

model EmergencyContacts {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  name     String
  phone    String
  relation String
  user     User   @relation(fields: [userId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  startTime   String
  endTime     String
  category    String
  color       String
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
}

enum Role {
  STUDENT
  PARENT
  TEACHER
  ADMIN
}

enum Term {
  FIRST
  SECOND
  THIRD
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}
